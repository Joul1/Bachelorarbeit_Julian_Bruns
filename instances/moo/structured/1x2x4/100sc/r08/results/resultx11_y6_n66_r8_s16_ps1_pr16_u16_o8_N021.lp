%%%%%
%Standard
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(6,6)),2).
move(1,((6,6),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(3,5)),6).
move(1,((3,5),(3,4)),7).
move(1,((3,4),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(7,4)),7).
move(3,((7,4),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(4,6)),1).
move(4,((4,6),(5,6)),2).
move(4,((5,6),(6,6)),3).
move(4,((6,6),(7,6)),4).
move(4,((7,6),(8,6)),5).
move(4,((8,6),(9,6)),6).
move(4,((9,6),(9,5)),7).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(4,5)),1).
move(5,((4,5),(4,4)),2).
move(5,((4,4),(4,3)),3).
move(5,((4,3),(5,3)),4).
move(5,((5,3),(6,3)),6).
move(5,((6,3),(7,3)),7).
move(5,((7,3),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(4,4)),5).
move(6,((4,4),(5,4)),6).
move(6,((5,4),(5,3)),7).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(6,4)),2).
move(7,((6,4),(6,3)),3).
move(7,((6,3),(6,2)),4).
move(7,((6,2),(5,2)),5).
move(7,((5,2),(5,3)),6).
move(7,((5,3),(4,3)),7).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(2,5)),6).
move(8,((2,5),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.501s (Solving: 0.01s 1st Model: 0.01s Unsat: 0.00s)
CPU Time     : 0.500s

Choices      : 650     
Conflicts    : 26       (Analyzed: 26)
Restarts     : 0       
Model-Level  : 166.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 26       (Deleted: 0)
  Binary     : 6        (Ratio:  23.08%)
  Ternary    : 0        (Ratio:   0.00%)
  Conflict   : 26       (Average Length:   21.4 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 26       (Average: 18.62 Max:  92 Sum:    484)
  Executed   : 26       (Average: 18.62 Max:  92 Sum:    484 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 123157   (Original: 113614)
  Choice     : 160     
Atoms        : 51947   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hDirectionalNarrowNode.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(6,6)),2).
move(1,((6,6),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(3,5)),6).
move(1,((3,5),(3,4)),7).
move(1,((3,4),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(7,4)),7).
move(3,((7,4),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(3,5)),1).
move(4,((3,5),(3,4)),2).
move(4,((3,4),(4,4)),3).
move(4,((4,4),(5,4)),4).
move(4,((5,4),(5,5)),5).
move(4,((5,5),(6,5)),6).
move(4,((6,5),(7,5)),7).
move(4,((7,5),(8,5)),8).
move(4,((8,5),(9,5)),9).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(5,6)),2).
move(5,((5,6),(6,6)),3).
move(5,((6,6),(7,6)),4).
move(5,((7,6),(8,6)),5).
move(5,((8,6),(8,5)),6).
move(5,((8,5),(8,4)),7).
move(5,((8,4),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(4,3)),4).
move(6,((4,3),(4,2)),6).
move(6,((4,2),(5,2)),7).
move(6,((5,2),(5,3)),8).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(5,5)),2).
move(7,((5,5),(4,5)),3).
move(7,((4,5),(4,4)),4).
move(7,((4,4),(3,4)),5).
move(7,((3,4),(3,3)),6).
move(7,((3,3),(4,3)),7).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(2,5)),6).
move(8,((2,5),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.543s (Solving: 0.02s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 0.547s

Choices      : 696     
Conflicts    : 33       (Analyzed: 33)
Restarts     : 0       
Model-Level  : 147.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 33       (Deleted: 0)
  Binary     : 7        (Ratio:  21.21%)
  Ternary    : 1        (Ratio:   3.03%)
  Conflict   : 33       (Average Length:   20.6 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 33       (Average: 16.64 Max:  92 Sum:    549)
  Executed   : 33       (Average: 16.64 Max:  92 Sum:    549 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 123361   (Original: 113818)
  Choice     : 160     
  Heuristic  : 93      
Atoms        : 52058   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hDistance.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(6,6)),2).
move(1,((6,6),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(3,5)),6).
move(1,((3,5),(3,4)),7).
move(1,((3,4),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(7,4)),7).
move(3,((7,4),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(3,5)),1).
move(4,((3,5),(3,4)),2).
move(4,((3,4),(4,4)),3).
move(4,((4,4),(5,4)),4).
move(4,((5,4),(5,5)),5).
move(4,((5,5),(6,5)),6).
move(4,((6,5),(7,5)),7).
move(4,((7,5),(8,5)),8).
move(4,((8,5),(9,5)),9).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(5,6)),2).
move(5,((5,6),(6,6)),3).
move(5,((6,6),(7,6)),4).
move(5,((7,6),(8,6)),5).
move(5,((8,6),(8,5)),6).
move(5,((8,5),(8,4)),7).
move(5,((8,4),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(4,3)),4).
move(6,((4,3),(4,2)),6).
move(6,((4,2),(5,2)),7).
move(6,((5,2),(5,3)),8).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(5,5)),2).
move(7,((5,5),(4,5)),3).
move(7,((4,5),(4,4)),4).
move(7,((4,4),(3,4)),5).
move(7,((3,4),(3,3)),6).
move(7,((3,3),(4,3)),7).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(2,5)),6).
move(8,((2,5),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.762s (Solving: 0.04s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 0.719s

Choices      : 696     
Conflicts    : 33       (Analyzed: 33)
Restarts     : 0       
Model-Level  : 147.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 33       (Deleted: 0)
  Binary     : 7        (Ratio:  21.21%)
  Ternary    : 1        (Ratio:   3.03%)
  Conflict   : 33       (Average Length:   20.6 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 33       (Average: 16.64 Max:  92 Sum:    549)
  Executed   : 33       (Average: 16.64 Max:  92 Sum:    549 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 123276   (Original: 113733)
  Choice     : 160     
Atoms        : 52066   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hForbiddenNode.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(6,6)),2).
move(1,((6,6),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(3,5)),6).
move(1,((3,5),(3,4)),7).
move(1,((3,4),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(7,4)),7).
move(3,((7,4),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(3,5)),1).
move(4,((3,5),(3,4)),2).
move(4,((3,4),(4,4)),3).
move(4,((4,4),(5,4)),4).
move(4,((5,4),(5,5)),5).
move(4,((5,5),(6,5)),6).
move(4,((6,5),(7,5)),7).
move(4,((7,5),(8,5)),8).
move(4,((8,5),(9,5)),9).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(5,6)),2).
move(5,((5,6),(6,6)),3).
move(5,((6,6),(7,6)),4).
move(5,((7,6),(8,6)),5).
move(5,((8,6),(8,5)),6).
move(5,((8,5),(8,4)),7).
move(5,((8,4),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(4,3)),4).
move(6,((4,3),(4,2)),6).
move(6,((4,2),(5,2)),7).
move(6,((5,2),(5,3)),8).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(5,5)),2).
move(7,((5,5),(4,5)),3).
move(7,((4,5),(4,4)),4).
move(7,((4,4),(3,4)),5).
move(7,((3,4),(3,3)),6).
move(7,((3,3),(4,3)),7).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(2,5)),6).
move(8,((2,5),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.746s (Solving: 0.02s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 0.750s

Choices      : 696     
Conflicts    : 33       (Analyzed: 33)
Restarts     : 0       
Model-Level  : 147.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 33       (Deleted: 0)
  Binary     : 7        (Ratio:  21.21%)
  Ternary    : 1        (Ratio:   3.03%)
  Conflict   : 33       (Average Length:   20.6 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 33       (Average: 16.64 Max:  92 Sum:    549)
  Executed   : 33       (Average: 16.64 Max:  92 Sum:    549 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 123276   (Original: 113733)
  Choice     : 160     
Atoms        : 52066   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hNaivePathDistance.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(7,5)),2).
move(1,((7,5),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(4,4)),6).
move(1,((4,4),(3,4)),7).
move(1,((3,4),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(8,6)),6).
move(3,((8,6),(8,5)),7).
move(3,((8,5),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(4,6)),1).
move(4,((4,6),(5,6)),2).
move(4,((5,6),(6,6)),3).
move(4,((6,6),(7,6)),4).
move(4,((7,6),(8,6)),5).
move(4,((8,6),(8,5)),6).
move(4,((8,5),(9,5)),7).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(4,5)),1).
move(5,((4,5),(4,4)),2).
move(5,((4,4),(5,4)),4).
move(5,((5,4),(6,4)),5).
move(5,((6,4),(7,4)),6).
move(5,((7,4),(7,3)),7).
move(5,((7,3),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(5,2)),4).
move(6,((5,2),(5,1)),5).
move(6,((5,1),(5,2)),6).
move(6,((5,2),(5,3)),7).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(6,4)),2).
move(7,((6,4),(6,3)),3).
move(7,((6,3),(5,3)),4).
move(7,((5,3),(4,3)),5).
move(8,((7,6),(6,6)),1).
move(8,((6,6),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(3,4)),6).
move(8,((3,4),(2,4)),7).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.687s (Solving: 0.02s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 0.656s

Choices      : 403     
Conflicts    : 25       (Analyzed: 25)
Restarts     : 0       
Model-Level  : 201.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 25       (Deleted: 0)
  Binary     : 4        (Ratio:  16.00%)
  Ternary    : 4        (Ratio:  16.00%)
  Conflict   : 25       (Average Length:   21.0 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 25       (Average:  8.08 Max:  50 Sum:    202)
  Executed   : 25       (Average:  8.08 Max:  50 Sum:    202 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 124493   (Original: 114966)
  Choice     : 160     
  Heuristic  : 1158     (Original: 1174)
Atoms        : 52125   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hNarrowNode.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(6,6)),2).
move(1,((6,6),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(5,4)),5).
move(1,((5,4),(4,4)),7).
move(1,((4,4),(3,4)),8).
move(1,((3,4),(3,3)),9).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(8,6)),6).
move(3,((8,6),(9,6)),7).
move(3,((9,6),(9,5)),8).
move(3,((9,5),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(4,6)),1).
move(4,((4,6),(5,6)),2).
move(4,((5,6),(6,6)),3).
move(4,((6,6),(7,6)),4).
move(4,((7,6),(8,6)),5).
move(4,((8,6),(8,5)),6).
move(4,((8,5),(9,5)),9).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(4,5)),1).
move(5,((4,5),(4,4)),2).
move(5,((4,4),(5,4)),3).
move(5,((5,4),(6,4)),4).
move(5,((6,4),(6,3)),5).
move(5,((6,3),(5,3)),6).
move(5,((5,3),(6,3)),7).
move(5,((6,3),(7,3)),8).
move(5,((7,3),(8,3)),9).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(5,2)),4).
move(6,((5,2),(5,3)),7).
move(7,((6,6),(5,6)),1).
move(7,((5,6),(5,5)),2).
move(7,((5,5),(4,5)),3).
move(7,((4,5),(4,4)),4).
move(7,((4,4),(4,3)),7).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(7,4)),2).
move(8,((7,4),(7,3)),3).
move(8,((7,3),(6,3)),4).
move(8,((6,3),(5,3)),5).
move(8,((5,3),(4,3)),6).
move(8,((4,3),(3,3)),7).
move(8,((3,3),(2,3)),8).
move(8,((2,3),(2,4)),9).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.701s (Solving: 0.02s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 0.688s

Choices      : 525     
Conflicts    : 17       (Analyzed: 17)
Restarts     : 0       
Model-Level  : 236.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 17       (Deleted: 0)
  Binary     : 3        (Ratio:  17.65%)
  Ternary    : 0        (Ratio:   0.00%)
  Conflict   : 17       (Average Length:   39.4 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 17       (Average: 17.00 Max:  88 Sum:    289)
  Executed   : 17       (Average: 17.00 Max:  88 Sum:    289 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 123806   (Original: 114264)
  Choice     : 160     
  Heuristic  : 538      (Original: 539)
Atoms        : 52058   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hNodeCost.lp
%%%%%
move(1,((8,6),(8,5)),1).
move(1,((8,5),(7,5)),2).
move(1,((7,5),(6,5)),3).
move(1,((6,5),(5,5)),4).
move(1,((5,5),(4,5)),5).
move(1,((4,5),(4,4)),6).
move(1,((4,4),(4,3)),7).
move(1,((4,3),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),8).
move(2,((9,6),(10,6)),9).
move(2,((10,6),(10,5)),10).
move(2,((10,5),(10,4)),11).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(7,4)),7).
move(3,((7,4),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(4,6)),1).
move(4,((4,6),(5,6)),2).
move(4,((5,6),(6,6)),3).
move(4,((6,6),(7,6)),4).
move(4,((7,6),(8,6)),5).
move(4,((8,6),(9,6)),6).
move(4,((9,6),(9,5)),7).
move(4,((9,5),(9,4)),10).
move(5,((4,6),(4,5)),1).
move(5,((4,5),(4,4)),2).
move(5,((4,4),(5,4)),3).
move(5,((5,4),(6,4)),5).
move(5,((6,4),(7,4)),6).
move(5,((7,4),(8,4)),7).
move(5,((8,4),(8,3)),8).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(4,5)),2).
move(6,((4,5),(4,4)),3).
move(6,((4,4),(4,3)),4).
move(6,((4,3),(5,3)),7).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(6,4)),2).
move(7,((6,4),(6,3)),3).
move(7,((6,3),(6,2)),4).
move(7,((6,2),(5,2)),5).
move(7,((5,2),(4,2)),6).
move(7,((4,2),(4,3)),8).
move(8,((7,6),(7,5)),1).
move(8,((7,5),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(4,5)),4).
move(8,((4,5),(3,5)),5).
move(8,((3,5),(2,5)),7).
move(8,((2,5),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.814s (Solving: 0.03s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 0.766s

Choices      : 266      (Domain: 61)
Conflicts    : 29       (Analyzed: 29)
Restarts     : 0       
Model-Level  : 128.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 29       (Deleted: 0)
  Binary     : 3        (Ratio:  10.34%)
  Ternary    : 2        (Ratio:   6.90%)
  Conflict   : 29       (Average Length:   27.2 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 29       (Average:  4.76 Max:  21 Sum:    138)
  Executed   : 29       (Average:  4.76 Max:  21 Sum:    138 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 131180   (Original: 121709)
  Choice     : 160     
  Heuristic  : 7896     (Original: 7968)
Atoms        : 52074   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hPathArea.lp
%%%%%
move(1,((8,6),(7,6)),1).
move(1,((7,6),(7,5)),2).
move(1,((7,5),(7,4)),3).
move(1,((7,4),(6,4)),4).
move(1,((6,4),(6,3)),5).
move(1,((6,3),(5,3)),6).
move(1,((5,3),(4,3)),7).
move(1,((4,3),(3,3)),8).
move(2,((1,6),(2,6)),1).
move(2,((2,6),(3,6)),2).
move(2,((3,6),(4,6)),3).
move(2,((4,6),(5,6)),4).
move(2,((5,6),(6,6)),5).
move(2,((6,6),(7,6)),6).
move(2,((7,6),(8,6)),7).
move(2,((8,6),(9,6)),9).
move(2,((9,6),(10,6)),10).
move(2,((10,6),(10,5)),11).
move(2,((10,5),(10,4)),12).
move(3,((2,6),(3,6)),1).
move(3,((3,6),(4,6)),2).
move(3,((4,6),(5,6)),3).
move(3,((5,6),(6,6)),4).
move(3,((6,6),(7,6)),5).
move(3,((7,6),(7,5)),6).
move(3,((7,5),(8,5)),7).
move(3,((8,5),(8,4)),8).
move(3,((8,4),(9,4)),9).
move(3,((9,4),(9,3)),10).
move(4,((3,6),(4,6)),1).
move(4,((4,6),(5,6)),2).
move(4,((5,6),(6,6)),3).
move(4,((6,6),(6,5)),4).
move(4,((6,5),(6,4)),5).
move(4,((6,4),(7,4)),6).
move(4,((7,4),(8,4)),7).
move(4,((8,4),(8,3)),8).
move(4,((8,3),(8,4)),9).
move(4,((8,4),(9,4)),10).
move(5,((4,6),(4,5)),1).
move(5,((4,5),(5,5)),4).
move(5,((5,5),(6,5)),5).
move(5,((6,5),(6,4)),6).
move(5,((6,4),(6,3)),7).
move(5,((6,3),(7,3)),8).
move(5,((7,3),(8,3)),9).
move(6,((5,6),(5,5)),1).
move(6,((5,5),(5,4)),2).
move(6,((5,4),(5,3)),3).
move(6,((5,3),(5,2)),4).
move(6,((5,2),(5,3)),7).
move(7,((6,6),(6,5)),1).
move(7,((6,5),(6,4)),2).
move(7,((6,4),(6,3)),4).
move(7,((6,3),(5,3)),5).
move(7,((5,3),(4,3)),6).
move(7,((4,3),(4,2)),7).
move(7,((4,2),(4,3)),8).
move(8,((7,6),(6,6)),1).
move(8,((6,6),(6,5)),2).
move(8,((6,5),(5,5)),3).
move(8,((5,5),(5,4)),4).
move(8,((5,4),(4,4)),6).
move(8,((4,4),(3,4)),7).
move(8,((3,4),(2,4)),8).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.704s (Solving: 0.03s 1st Model: 0.03s Unsat: 0.00s)
CPU Time     : 0.688s

Choices      : 462     
Conflicts    : 42       (Analyzed: 42)
Restarts     : 0       
Model-Level  : 198.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 42       (Deleted: 0)
  Binary     : 8        (Ratio:  19.05%)
  Ternary    : 3        (Ratio:   7.14%)
  Conflict   : 42       (Average Length:   23.0 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 42       (Average:  6.29 Max:  30 Sum:    264)
  Executed   : 42       (Average:  6.29 Max:  30 Sum:    264 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 131164   (Original: 121693)
  Choice     : 160     
  Heuristic  : 7896     (Original: 7968)
Atoms        : 52058   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

%%%%%
%hStrange.lp
%%%%%
move(1,((8,6),(7,6)),2).
move(1,((7,6),(7,5)),3).
move(1,((7,5),(7,6)),4).
move(1,((7,6),(7,5)),5).
move(1,((7,5),(7,4)),6).
move(1,((7,4),(8,4)),7).
move(1,((8,4),(8,3)),8).
move(1,((8,3),(8,2)),9).
move(1,((8,2),(9,2)),10).
move(1,((9,2),(10,2)),11).
move(1,((10,2),(9,2)),12).
move(1,((9,2),(8,2)),13).
move(1,((8,2),(7,2)),14).
move(1,((7,2),(6,2)),15).
move(1,((6,2),(6,3)),16).
move(1,((6,3),(5,3)),17).
move(1,((5,3),(4,3)),18).
move(1,((4,3),(3,3)),19).
move(2,((1,6),(2,6)),2).
move(2,((2,6),(2,5)),4).
move(2,((2,5),(2,4)),6).
move(2,((2,4),(2,3)),7).
move(2,((2,3),(2,2)),8).
move(2,((2,2),(1,2)),9).
move(2,((1,2),(2,2)),10).
move(2,((2,2),(2,3)),11).
move(2,((2,3),(3,3)),12).
move(2,((3,3),(4,3)),13).
move(2,((4,3),(5,3)),14).
move(2,((5,3),(6,3)),15).
move(2,((6,3),(7,3)),16).
move(2,((7,3),(8,3)),17).
move(2,((8,3),(8,4)),18).
move(2,((8,4),(9,4)),19).
move(2,((9,4),(10,4)),20).
move(3,((2,6),(3,6)),2).
move(3,((3,6),(3,5)),4).
move(3,((3,5),(3,4)),5).
move(3,((3,4),(3,3)),6).
move(3,((3,3),(3,2)),7).
move(3,((3,2),(3,1)),8).
move(3,((3,1),(4,1)),9).
move(3,((4,1),(5,1)),10).
move(3,((5,1),(6,1)),11).
move(3,((6,1),(7,1)),12).
move(3,((7,1),(8,1)),13).
move(3,((8,1),(9,1)),14).
move(3,((9,1),(10,1)),15).
move(3,((10,1),(10,2)),16).
move(3,((10,2),(10,3)),17).
move(3,((10,3),(10,2)),18).
move(3,((10,2),(9,2)),19).
move(3,((9,2),(9,3)),20).
move(4,((3,6),(3,5)),2).
move(4,((3,5),(3,4)),4).
move(4,((3,4),(2,4)),5).
move(4,((2,4),(2,3)),6).
move(4,((2,3),(2,2)),7).
move(4,((2,2),(2,1)),8).
move(4,((2,1),(2,2)),11).
move(4,((2,2),(2,3)),12).
move(4,((2,3),(2,4)),13).
move(4,((2,4),(3,4)),14).
move(4,((3,4),(4,4)),15).
move(4,((4,4),(5,4)),16).
move(4,((5,4),(6,4)),17).
move(4,((6,4),(7,4)),18).
move(4,((7,4),(8,4)),19).
move(4,((8,4),(9,4)),20).
move(5,((4,6),(4,5)),3).
move(5,((4,5),(4,4)),4).
move(5,((4,4),(4,3)),5).
move(5,((4,3),(4,2)),6).
move(5,((4,2),(4,1)),7).
move(5,((4,1),(4,2)),8).
move(5,((4,2),(4,3)),9).
move(5,((4,3),(4,4)),10).
move(5,((4,4),(4,5)),12).
move(5,((4,5),(5,5)),13).
move(5,((5,5),(6,5)),14).
move(5,((6,5),(7,5)),15).
move(5,((7,5),(7,4)),16).
move(5,((7,4),(7,3)),17).
move(5,((7,3),(7,2)),18).
move(5,((7,2),(8,2)),19).
move(5,((8,2),(8,3)),20).
move(6,((5,6),(5,5)),3).
move(6,((5,5),(6,5)),4).
move(6,((6,5),(6,4)),5).
move(6,((6,4),(6,3)),6).
move(6,((6,3),(6,2)),7).
move(6,((6,2),(7,2)),8).
move(6,((7,2),(7,1)),9).
move(6,((7,1),(8,1)),10).
move(6,((8,1),(9,1)),11).
move(6,((9,1),(10,1)),12).
move(6,((10,1),(10,2)),14).
move(6,((10,2),(9,2)),15).
move(6,((9,2),(8,2)),16).
move(6,((8,2),(7,2)),17).
move(6,((7,2),(6,2)),18).
move(6,((6,2),(5,2)),19).
move(6,((5,2),(5,3)),20).
move(7,((6,6),(7,6)),3).
move(7,((7,6),(8,6)),4).
move(7,((8,6),(8,5)),5).
move(7,((8,5),(9,5)),7).
move(7,((9,5),(9,4)),8).
move(7,((9,4),(9,3)),9).
move(7,((9,3),(10,3)),10).
move(7,((10,3),(11,3)),11).
move(7,((11,3),(11,2)),12).
move(7,((11,2),(10,2)),13).
move(7,((10,2),(9,2)),14).
move(7,((9,2),(8,2)),15).
move(7,((8,2),(7,2)),16).
move(7,((7,2),(6,2)),17).
move(7,((6,2),(5,2)),18).
move(7,((5,2),(4,2)),19).
move(7,((4,2),(4,3)),20).
move(8,((7,6),(7,5)),2).
move(8,((7,5),(6,5)),3).
move(8,((6,5),(7,5)),4).
move(8,((7,5),(7,4)),5).
move(8,((7,4),(7,3)),6).
move(8,((7,3),(7,4)),8).
move(8,((7,4),(6,4)),9).
move(8,((6,4),(6,3)),10).
move(8,((6,3),(5,3)),11).
move(8,((5,3),(4,3)),12).
move(8,((4,3),(4,2)),13).
move(8,((4,2),(3,2)),14).
move(8,((3,2),(2,2)),15).
move(8,((2,2),(2,3)),16).
move(8,((2,3),(2,2)),17).
move(8,((2,2),(2,3)),19).
move(8,((2,3),(2,4)),20).
SATISFIABLE

Models       : 1+
Calls        : 1
Time         : 0.694s (Solving: 0.02s 1st Model: 0.02s Unsat: 0.00s)
CPU Time     : 0.688s

Choices      : 205      (Domain: 205)
Conflicts    : 19       (Analyzed: 19)
Restarts     : 0       
Model-Level  : 112.0   
Problems     : 1        (Average Length: 0.00 Splits: 0)
Lemmas       : 19       (Deleted: 0)
  Binary     : 1        (Ratio:   5.26%)
  Ternary    : 1        (Ratio:   5.26%)
  Conflict   : 19       (Average Length:   34.4 Ratio: 100.00%) 
  Loop       : 0        (Average Length:    0.0 Ratio:   0.00%) 
  Other      : 0        (Average Length:    0.0 Ratio:   0.00%) 
Backjumps    : 19       (Average:  4.89 Max:  27 Sum:     93)
  Executed   : 19       (Average:  4.89 Max:  27 Sum:     93 Ratio: 100.00%)
  Bounded    : 0        (Average:  0.00 Max:   0 Sum:      0 Ratio:   0.00%)

Rules        : 131164   (Original: 121693)
  Choice     : 160     
  Heuristic  : 7896     (Original: 7968)
Atoms        : 52058   
Bodies       : 84220    (Original: 74677)
  Count      : 1172     (Original: 1569)
Equivalences : 45406    (Atom=Atom: 182 Body=Body: 191 Other: 45033)
Tight        : Yes
Variables    : 83041    (Eliminated:    0 Frozen: 44723)
Constraints  : 218125   (Binary:  79.6% Ternary:  14.5% Other:   5.9%)

